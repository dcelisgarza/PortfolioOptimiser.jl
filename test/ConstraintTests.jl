using CSV, DataFrames, LinearAlgebra, PortfolioOptimiser, Statistics, StatsBase, Test,
      TimeSeries, Clarabel, Graphs, Distances

assets_path = joinpath(@__DIR__, "assets/stock_prices.csv")
factors_path = joinpath(@__DIR__, "assets/factor_prices.csv")
prices_assets = TimeArray(CSV.File(assets_path); timestamp = :date)
prices_factors = TimeArray(CSV.File(factors_path); timestamp = :date)

rf = 1.0329^(1 / 252) - 1
l = 2.0

@testset "Asset constraints" begin
    portfolio = Portfolio(; prices = prices_assets)
    asset_sets = DataFrame("Asset" => portfolio.assets,
                           "PDBHT" => [1, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2,
                                       3, 1],
                           "SPDBHT" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 3, 2, 3, 3, 3, 3, 1,
                                        4, 2, 1],
                           "Pward" => [1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 4, 2, 3, 4, 1, 2,
                                       2, 1],
                           "SPward" => [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 4, 3, 2, 2, 3, 1,
                                        2, 2, 1],
                           "G2DBHT" => [1, 2, 1, 1, 1, 3, 2, 3, 4, 3, 4, 3, 3, 4, 4, 3, 2,
                                        3, 4, 1],
                           "G2ward" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 2, 1,
                                        4, 2, 2])
    constraints = DataFrame(:Enabled => [true, true, true, true, true, true, true, true,
                                         true, true, true, true, true, true, true, true,
                                         true, true, true, true, true, true, true, true,
                                         true, true, true, true, true, true, false],
                            :Type => ["Asset", "Asset", "Asset", "Asset", "All Assets",
                                      "All Assets", "All Assets", "All Assets", "Asset",
                                      "Asset", "All Assets", "All Assets", "Subset",
                                      "Subset", "Subset", "Subset", "All Subsets",
                                      "All Subsets", "All Subsets", "All Subsets", "Subset",
                                      "Subset", "All Subsets", "All Subsets",
                                      "Each Asset in Subset", "Each Asset in Subset",
                                      "Each Asset in Subset", "Each Asset in Subset",
                                      "Each Asset in Subset", "Each Asset in Subset",
                                      "Asset"],
                            :Set => ["", "", "", "", "", "", "", "", "", "", "", "",
                                     "PDBHT", "PDBHT", "SPDBHT", "SPDBHT", "G2DBHT",
                                     "G2ward", "PDBHT", "SPDBHT", "Pward", "SPward",
                                     "G2DBHT", "G2ward", "PDBHT", "SPDBHT", "SPward",
                                     "G2DBHT", "Pward", "SPDBHT", "Pward"],
                            :Position => ["GOOG", "GOOG", "AMZN", "AMZN", "", "", "", "",
                                          "T", "T", "", "", 3, 3, 4, 4, "", "", "", "", 1,
                                          1, "", "", 2, 3, 4, 2, 3, 1, 2],
                            :Sign => [">=", "<=", ">=", "<=", ">=", "<=", ">=", "<=", ">=",
                                      "<=", ">=", "<=", ">=", "<=", ">=", "<=", ">=", "<=",
                                      ">=", "<=", ">=", "<=", ">=", "<=", ">=", "<=", ">=",
                                      "<=", ">=", "<=", ">="],
                            :Weight => [0.03, 0.1, "", "", 0.01, 0.35, "", "", "", "", "",
                                        "", 0.04, 0.2, "", "", 0.03, 0.37, "", "", "", "",
                                        "", "", 0.022, 0.41, "", "", "", "", -0.3],
                            :Relative_Type => ["", "", "Asset", "Asset", "", "", "Asset",
                                               "Asset", "Subset", "Subset", "Subset",
                                               "Subset", "", "", "Asset", "Asset", "", "",
                                               "Asset", "Asset", "Subset", "Subset",
                                               "Subset", "Subset", "", "", "Asset", "Asset",
                                               "Subset", "Subset", ""],
                            :Relative_Set => ["", "", "", "", "", "", "", "", "PDBHT",
                                              "SPDBHT", "Pward", "SPward", "", "", "", "",
                                              "", "", "", "", "PDBHT", "SPDBHT", "Pward",
                                              "SPward", "", "", "", "", "G2DBHT", "G2ward",
                                              ""],
                            :Relative_Position => ["", "", "T", "T", "", "", "GM", "PFE", 3,
                                                   1, 2, 2, "", "", "T", "T", "", "", "GM",
                                                   "PFE", 4, 2, 1, 3, "", "", "GM", "AMZN",
                                                   4, 2, ""],
                            :Factor => ["", "", 0.5, 2, "", "", 0.3, 2, 0.03, 0.4, 0.013,
                                        0.5, "", "", 0.27, 0.61, "", "", 0.23, 3, 0.07,
                                        0.11, 0.17, 0.7, "", "", 0.1, 0.5, 0.19, 0.57, ""])

    A, B = asset_constraints(constraints, asset_sets)

    At = reshape([1.0, -1.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, 0.0, 0.4, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, 1.0, -1.0, 0.83, -0.17,
                  -0.17, -0.17, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -1.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.4, 0.0, 1.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0,
                  1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, -0.0, -0.0,
                  -0.0, 1.0, -1.0, -0.17, 0.83, -0.17, -0.17, -1.0, -0.0, -0.0, -0.0, 1.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0,
                  -0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.4, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
                  0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, -1.0, -0.0, -0.0, -0.0, 1.0, -1.0, 0.83, -0.17, -0.17, -0.17, -1.0,
                  -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
                  -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
                  -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, 1.0,
                  -1.0, 0.83, -0.17, -0.17, -0.17, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0,
                  0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -1.0, 0.0,
                  0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.4, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  -0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0,
                  -0.0, -0.0, -0.0, 1.0, -1.0, 0.83, -0.17, -0.17, -0.17, -1.0, -0.0, -0.0,
                  -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.5, 0.5, 0.5, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0,
                  0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.03, -0.0, -0.013, -0.013, -0.013, -0.013, -0.013, 0.987, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0,
                  0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
                  -0.0, -1.0, -0.0, -0.0, 0.0, 0.11, 0.0, 0.0, 1.0, 0.0, -0.0, -1.0, -0.0,
                  -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -0.0, -0.0, -0.0, 0.0, 0.0, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.0,
                  0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0,
                  0.0, 0.0, -0.0, -0.0, -1.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, -0.0,
                  -0.0, -1.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -0.0, -1.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, 0.0, -0.0, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, 0.987, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, 0.0, -0.0, 0.0, 0.0,
                  1.0, 0.0, 0.7, 0.7, 0.7, -0.30000000000000004, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.03, -0.0, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, 0.987, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0,
                  0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -1.0, -0.0, -0.0, 0.0,
                  0.11, 0.0, 0.0, 0.0, 1.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.19, -0.19,
                  0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3, -0.3, -0.3, -0.3, -0.3,
                  -0.3, -0.3, -0.3, -0.3, 0.7, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3,
                  -0.3, -0.3, -0.3, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.03,
                  -0.0, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, 0.987, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0, 0.0, -0.0,
                  0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -0.23, -0.23, 0.77, -0.23, -0.0,
                  -0.0, -1.0, -0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -1.0, -0.0, -0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -0.0,
                  -0.0, -0.0, 0.0, 0.0, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.0, 0.0,
                  -0.5, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.97,
                  -1.0, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, 0.987, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0, -0.27, 0.61,
                  0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0,
                  -1.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
                  -0.0, -0.19, -0.19, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
                  0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
                  -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 1.0, -0.0, -1.0, -0.0, -0.0, -0.07, 0.11, 0.0, 0.0, 1.0,
                  0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.57, 0.57, 0.57, 0.57,
                  0.57, 0.57, 0.57, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0,
                  0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -1.0, -0.0, -0.07,
                  -0.0, 0.0, 0.0, 1.0, 0.0, 0.7, 0.7, -0.30000000000000004, 0.7, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
                  0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.03, -0.0, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, 0.987, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0, 0.0, -0.0, 0.0, 0.0, 0.0,
                  1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -1.0, -0.0, 0.0,
                  -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.19, -0.19,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.03, -0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                  0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, -1.0, 0.0, -0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -1.0, -0.0,
                  0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.19,
                  0.81, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0,
                  -0.0, -1.0, -0.0, -0.07, -0.0, 0.0, 0.0, 1.0, 0.0, 0.7,
                  -0.30000000000000004, 0.7, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.57, 0.57, 0.57,
                  0.57, 0.57, 0.57, 0.57, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -1.0, -0.0, -0.0, -0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0,
                  0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, 1.0,
                  -1.0, -0.17, 0.83, -0.17, -0.17, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -1.0, 0.0,
                  0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
                  2.0, 2.0, 1.0, 2.0, 2.0, 0.0, -0.0, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, 0.987, -0.013, -0.013, 0.5, 0.5, 0.5, 0.5,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5,
                  0.5, 0.5, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0,
                  0.0, 1.0, 0.0, 0.0, 3.0, 3.0, 3.0, 2.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0,
                  -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -1.0, -0.0, -0.03, -0.0, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013, -0.013,
                  -0.013, -0.013, -0.013, -0.013, 0.987, -0.013, 0.5, 0.5, 0.5, 0.5, 0.5,
                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5,
                  0.5, 1.0, -1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0,
                  0.0, 1.0, 0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.11, 0.0, 0.0, 0.0, 1.0,
                  -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.19, -0.19, 0.57, 0.57, 0.57, 0.57,
                  0.57, 0.57, 0.57, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -1.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
                  -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0,
                  0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, 1.0,
                  -1.0, 0.83, -0.17, -0.17, -0.17, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0,
                  0.0, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, -0.43000000000000005], (181, 20))
    Bt = [0.03, -0.1, 0.0, 0.0, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
          0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, -0.35, -0.35, -0.35,
          -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35,
          -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04, -0.2, 0.0, 0.0, 0.03,
          0.03, 0.03, 0.03, -0.37, -0.37, -0.37, -0.37, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022, 0.022, 0.022, 0.022,
          0.022, -0.41, -0.41, -0.41, -0.41, -0.41, -0.41, -0.41, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    @test isapprox(A, At)
    @test isapprox(B, Bt)
end

@testset "Asset views" begin
    portfolio = Portfolio(; prices = prices_assets)
    asset_sets = DataFrame("Asset" => portfolio.assets,
                           "PDBHT" => [1, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2,
                                       3, 1],
                           "SPDBHT" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 3, 2, 3, 3, 3, 3, 1,
                                        4, 2, 1],
                           "Pward" => [1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 4, 2, 3, 4, 1, 2,
                                       2, 1],
                           "SPward" => [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 4, 3, 2, 2, 3, 1,
                                        2, 2, 1],
                           "G2DBHT" => [1, 2, 1, 1, 1, 3, 2, 3, 4, 3, 4, 3, 3, 4, 4, 3, 2,
                                        3, 4, 1],
                           "G2ward" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 2, 1,
                                        4, 2, 2])
    views = DataFrame("Enabled" => [true, true, true, true, true, true, true, true, true,
                                    true, true, true, true, true, true, true, true, true,
                                    true, true, true, true, true, true, false],
                      "Type" => ["Asset", "Asset", "Asset", "Asset", "Asset", "Asset",
                                 "Asset", "Asset", "Asset", "Asset", "Asset", "Asset",
                                 "Subset", "Subset", "Subset", "Subset", "Subset", "Subset",
                                 "Subset", "Subset", "Subset", "Subset", "Subset", "Subset",
                                 "Asset"],
                      "Set" => ["", "", "", "", "", "", "", "", "", "", "", "", "PDBHT",
                                "PDBHT", "PDBHT", "PDBHT", "PDBHT", "PDBHT", "Pward",
                                "Pward", "Pward", "Pward", "SPward", "SPward", ""],
                      "Position" => ["GE", "SBUX", "BABA", "SHLD", "FB", "WMT", "UAA",
                                     "XOM", "UAA", "AMD", "BBY", "FB", 1, 3, 4, 2, 1, 3, 1,
                                     3, 2, 1, 3, 2, "GOOG"],
                      "Sign" => [">=", ">=", "<=", "<=", ">=", ">=", "<=", "<=", ">=", ">=",
                                 "<=", "<=", ">=", ">=", "<=", "<=", ">=", ">=", "<=", "<=",
                                 ">=", ">=", "<=", "<=", ">="],
                      "Return" => [0.3, -0.2, 2.3, -0.7, 0.17, -0.11, 0.13, -0.23, 0.5,
                                   -0.37, 0.23, 5.1, 0.27, -0.31, 0.41, -0.19, 0.03, -0.29,
                                   0.71, -0.41, 0.61, -0.019, 1.7, -2.3, 0.69],
                      "Relative_Type" => ["", "", "", "", "Asset", "Asset", "Asset",
                                          "Asset", "Subset", "Subset", "Subset", "Subset",
                                          "", "", "", "", "Asset", "Asset", "Asset",
                                          "Asset", "Subset", "Subset", "Subset", "Subset",
                                          ""],
                      "Relative_Position" => ["", "", "", "", "GOOG", "AMD", "MA", "BAC", 3,
                                              2, 4, 2, "", "", "", "", "AAPL", "GE", "PFE",
                                              "RRC", 3, 3, 2, 3, ""],
                      "Relative_Set" => ["", "", "", "", "", "", "", "", "PDBHT", "PDBHT",
                                         "Pward", "Pward", "", "", "", "", "", "", "", "",
                                         "PDBHT", "Pward", "SPward", "Pward", ""])

    P, Q = asset_views(views, asset_sets)

    Pt = reshape([0.0, -0.0, 0.0, -0.0, -1.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.2,
                  -0.0, 0.0, -0.0, 0.2, -0.0, 0.14285714285714285, -0.0, 0.0,
                  -0.14285714285714285, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, 0.0, 0.2, 0.0, 0.0, 0.0, -0.0, 0.0, -0.2, -1.0, -0.0,
                  0.14285714285714285, -0.0, 0.0, -0.14285714285714285, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.2, -0.0,
                  0.0, -0.0, 0.2, -0.0, 0.14285714285714285, -0.0, 0.0,
                  -0.14285714285714285, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -0.0, 0.0, 0.0, 0.2, -0.0, 0.0, -0.0, 0.2, -0.0,
                  0.14285714285714285, -0.0, 0.0, -0.14285714285714285, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.2, -0.0,
                  0.0, -0.0, 0.2, -0.0, 0.14285714285714285, -0.0, 0.0,
                  -0.14285714285714285, 0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, -0.14285714285714285, -0.0, 0.0, -0.125, 0.0, -0.14285714285714285,
                  0.0, -0.0, 0.0, 0.8571428571428572, 0.0, -0.0, -0.01785714285714285, -0.0,
                  -0.1111111111111111, -0.1111111111111111, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0,
                  0.0, -0.0, 0.0, -0.8, 0.0, 0.0, 0.0, -0.0, 0.0, -0.2, 0.0, -0.0, 0.0,
                  -0.5, 0.0, 0.5, -0.1111111111111111, 0.3888888888888889, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -1.0, 0.0, -0.0, 0.0, 0.2, 0.0, -0.125, 0.0, -0.0, 0.0, -0.2,
                  0.0, -0.0, 0.0, -0.0, 0.125, -0.0, 0.3333333333333333, -0.0, 0.0, -0.0,
                  0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.14285714285714285, -0.0, 0.0, -0.125,
                  0.0, -0.14285714285714285, 0.0, -0.0, 0.0, -0.14285714285714285, 0.0,
                  -0.0, -0.01785714285714285, -0.0, -0.1111111111111111,
                  -0.1111111111111111, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0,
                  -0.14285714285714285, -0.0, 0.0, -0.125, 0.0, -0.14285714285714285, 0.0,
                  -0.0, 0.0, -0.14285714285714285, 0.0, -0.0, -0.01785714285714285, -0.0,
                  -0.1111111111111111, -0.1111111111111111, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0,
                  0.0, -0.0, -0.14285714285714285, -0.0, 0.0, -0.125, 0.0,
                  -0.14285714285714285, 0.0, -0.0, 0.0, -0.14285714285714285, 0.0, -0.0,
                  -0.01785714285714285, -0.0, -0.1111111111111111, -0.1111111111111111, 0.0,
                  -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, 1.0, -0.0, -0.3333333333333333,
                  0.0, 0.0, -0.0, 0.3333333333333333, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0,
                  0.0, -0.0, 0.0, -0.0, 0.0, -1.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0,
                  -0.3333333333333333, 0.0, 0.0, -0.0, 0.3333333333333333, -0.0, 0.0, -0.0,
                  0.0, -0.0, 0.0, -0.0, 0.3333333333333333, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -1.0, -0.14285714285714285, -0.0, 0.0, -0.125, 0.0,
                  -0.14285714285714285, 0.0, -0.0, 0.0, -0.14285714285714285, 0.0, -0.0,
                  -0.01785714285714285, -0.0, -0.1111111111111111, -0.1111111111111111, 0.0,
                  -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.14285714285714285, -0.0, 0.0,
                  0.0, 0.0, -0.14285714285714285, 0.0, -0.0, 0.0, -0.14285714285714285, 0.0,
                  0.5, -0.14285714285714285, 0.5, -0.1111111111111111, 0.3888888888888889,
                  0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.6666666666666667,
                  0.0, 0.0, -0.0, 0.3333333333333333, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0,
                  0.3333333333333333, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -1.0, -0.0,
                  0.0, 0.2, 0.0, 0.0, 0.0, -0.0, 0.0, -0.2, 0.0, -0.0, 0.14285714285714285,
                  -0.0, 0.0, -0.14285714285714285, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, 0.0, -0.0, 0.0, 0.2, 0.0, -0.125, 0.0, -0.0, 0.0, -0.2, 0.0, -0.0,
                  -1.0, -0.0, 0.125, -0.0, -0.1111111111111111, -0.1111111111111111, 0.0,
                  -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.14285714285714285, -0.0, 0.0,
                  -0.125, 0.0, -0.14285714285714285, 0.0, -0.0, 0.0, -0.14285714285714285,
                  0.0, -0.0, -0.01785714285714285, -0.0, -0.1111111111111111,
                  -0.1111111111111111, 0.0, -1.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0,
                  -0.0, 0.0, 0.0, 0.2, -0.0, 0.0, -0.0, 0.2, -0.0, 0.14285714285714285,
                  -0.0, 0.0, -0.14285714285714285, 0.0, -0.0], size(P))

    Qt = [0.3, 0.2, 2.3, 0.7, 0.17, 0.11, 0.13, 0.23, 0.5, 0.37, 0.23, 5.1, 0.27, 0.31,
          0.41, 0.19, 0.03, 0.29, 0.71, 0.41, 0.61, 0.019, 1.7, 2.3]

    @test isapprox(P, Pt)
    @test isapprox(Q, Qt)
end

@testset "Factor constraints" begin
    portfolio = Portfolio(; prices = prices_assets, f_prices = prices_factors)
    loadings = loadings_matrix(DataFrame(portfolio.f_returns, portfolio.f_assets),
                               DataFrame(portfolio.returns, portfolio.assets), BReg())

    constraints = DataFrame("Enabled" => [true, true, true, true, true, true, true, true,
                                          true, true, true, true, true, true, false],
                            "Factor" => ["MTUM", "MTUM", "MTUM", "QUAL", "QUAL", "QUAL",
                                         "VLUE", "VLUE", "VLUE", "SIZE", "SIZE", "SIZE",
                                         "USMV", "USMV", "USMV"],
                            "Sign" => ["<=", "<=", ">=", ">=", ">=", "<=", "<=", "<=", ">=",
                                       ">=", ">=", "<=", "<=", ">=", "<="],
                            "Value" => [0.55, 0.9, 0.2, 0.2, 0.5, 0.7, -0.1, -0.3, -0.5,
                                        -0.2, -0.7, -0.1, 0.2, 0.6, 0.73],
                            "Relative_Factor" => ["", "VLUE", "SIZE", "", "SIZE", "USMV",
                                                  "", "USMV", "MTUM", "", "MTUM", "QUAL",
                                                  "", "", "SIZE"])
    C, D = factor_constraints(constraints, loadings)

    loadingst = hcat(DataFrame(:tickers => ["GOOG", "AAPL", "FB", "BABA", "AMZN", "GE",
                                            "AMD", "WMT", "BAC", "GM", "T", "UAA", "SHLD",
                                            "XOM", "RRC", "BBY", "MA", "PFE", "JPM", "SBUX"]),
                     DataFrame(reshape([0.0006682666783877028, 0.0008125085541546204,
                                        0.0009938539577313578, 0.0008448251080905889,
                                        0.0017791646483353075, -0.0005632788650349695,
                                        0.001738046978669652, 0.00033425409596189986,
                                        0.0008913431138749996, 0.00046117682801699036,
                                        0.0002458401993870664, -0.0005357683629290428,
                                        -0.001552593059063253, -1.9438538649469838e-6,
                                        -0.0011297716334776765, 0.001178183021578672,
                                        0.0010624628566782079, 0.00035901438896399323,
                                        0.0009055676318466468, 0.000618697117955252, 0.0,
                                        0.0, 0.0, 0.0, 0.026624010504930753,
                                        -0.2614329387110636, 0.17373178882466736, 0.0, 0.0,
                                        0.0, 0.0, 0.1622273531418773, 0.0, 0.0, 0.0, 0.0,
                                        0.0, 0.0, 0.0, 0.18704558888036088, 0.0, 0.0, 0.0,
                                        0.0, 0.0, 0.34214288894365086, 0.0, 0.0,
                                        0.4759572343739958, 0.0, 0.20947832327860058, 0.0,
                                        0.46512629166678016, 0.0, 0.0, 0.0, 0.0,
                                        0.26762446801768025, 0.5882648692660363, 0.0, 0.0,
                                        0.0, -0.0469998531043761, 0.0, 0.0, 0.0, 0.0, 0.0,
                                        0.0, 0.2677805704229642, -0.1957071228053125, 0.0,
                                        0.0, 0.0, -0.2693637060710647, -0.06016206857452389,
                                        0.0, -0.24169692610064705, -0.23411356595605096,
                                        -0.21731935166210736, 0.0, -0.09204546965378291,
                                        0.0, -0.33097845086566874, 0.0, 0.0, 0.0,
                                        -0.057535605163043506, 0.0, 0.0, 0.0, 0.0, 0.0,
                                        -0.10164210407325881, 0.0, 0.0,
                                        -0.13261040097042645, 0.0, 0.0, 0.0,
                                        0.0916256099434114, 0.0, 0.0, 0.41481713511157836,
                                        0.0, 0.0, 0.0, 0.0, -0.6089091167169949,
                                        -0.27210017033490924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                        0.0, 0.0, -0.4748967098697935, 0.0], (20, 6)),
                               names(loadings)[2:end]))

    Ct = reshape([-0.0, -0.0, 0.0, 0.0, 0.0, -0.0916256099434114, -0.0, -0.0916256099434114,
                  0.0, 0.0, 0.0, -0.0, -0.0916256099434114, 0.0916256099434114, -0.0, -0.0,
                  -0.09204546965378291, 0.0, -0.09204546965378291, -0.0, -0.0, -0.0, 0.0,
                  -0.09204546965378291, 0.09204546965378291, -0.09204546965378291, -0.0,
                  0.0, -0.0, 0.0469998531043761, 0.0, 0.0, 0.0, -0.0, 0.0469998531043761,
                  -0.0469998531043761, 0.0469998531043761, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0,
                  -0.0, -0.33097845086566874, 0.0, -0.33097845086566874,
                  -0.41481713511157836, -0.0, -0.41481713511157836, 0.0,
                  -0.33097845086566874, 0.33097845086566874, -0.33097845086566874,
                  -0.41481713511157836, 0.41481713511157836, -0.026624010504930753,
                  0.026624010504930753, -0.026624010504930753, 0.0, 0.0, -0.0, -0.0, -0.0,
                  0.026624010504930753, 0.0, 0.026624010504930753, -0.0, -0.0, 0.0,
                  0.2614329387110636, -0.2614329387110636, 0.2614329387110636,
                  0.34214288894365086, -0.34214288894365086, 0.34214288894365086, -0.0,
                  -0.0, -0.2614329387110636, 0.0, -0.2614329387110636, -0.34214288894365086,
                  -0.0, 0.0, -0.17373178882466736, 0.17373178882466736,
                  -0.17373178882466736, 0.0, 0.0, -0.0, -0.0, -0.0, 0.17373178882466736,
                  0.0, 0.17373178882466736, -0.0, -0.0, 0.0, -0.0, -0.0,
                  -0.057535605163043506, 0.0, -0.057535605163043506, -0.0, -0.0, -0.0, 0.0,
                  -0.057535605163043506, 0.057535605163043506, -0.057535605163043506, -0.0,
                  0.0, -0.0, -0.0, 0.0, 0.4759572343739958, -0.4759572343739958,
                  1.0848663510909906, -0.0, 0.6089091167169949, 0.0, 0.0, 0.0,
                  -0.4759572343739958, 0.6089091167169949, -0.6089091167169949, -0.0,
                  -0.2677805704229642, 0.0, 0.0, 0.0, 0.27210017033490924,
                  -0.2677805704229642, 0.5398807407578734, -0.2677805704229642, 0.0, 0.0,
                  -0.0, 0.27210017033490924, -0.27210017033490924, -0.0, 0.1957071228053125,
                  0.0, 0.20947832327860058, -0.20947832327860058, 0.20947832327860058,
                  0.1957071228053125, -0.1957071228053125, 0.1957071228053125, 0.0, 0.0,
                  -0.20947832327860058, -0.0, 0.0, -0.1622273531418773, 0.1622273531418773,
                  -0.1622273531418773, 0.0, 0.0, -0.0, -0.0, -0.0, 0.1622273531418773, 0.0,
                  0.1622273531418773, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.46512629166678016,
                  -0.46512629166678016, 0.46512629166678016, -0.0, -0.0, 0.0, 0.0, 0.0,
                  -0.46512629166678016, -0.0, 0.0, -0.0, -0.0, -0.10164210407325881, 0.0,
                  -0.10164210407325881, -0.0, -0.0, -0.0, 0.0, -0.10164210407325881,
                  0.10164210407325881, -0.10164210407325881, -0.0, 0.0, -0.0,
                  0.2693637060710647, 0.0, 0.0, 0.0, -0.0, 0.2693637060710647,
                  -0.2693637060710647, 0.2693637060710647, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0,
                  0.06016206857452389, 0.0, 0.0, 0.0, -0.0, 0.06016206857452389,
                  -0.06016206857452389, 0.06016206857452389, 0.0, 0.0, -0.0, -0.0, 0.0,
                  -0.0, -0.0, -0.13261040097042645, 0.0, -0.13261040097042645, -0.0, -0.0,
                  -0.0, 0.0, -0.13261040097042645, 0.13261040097042645,
                  -0.13261040097042645, -0.0, 0.0, -0.0, 0.24169692610064705, 0.0,
                  0.26762446801768025, -0.26762446801768025, 0.26762446801768025,
                  0.24169692610064705, -0.24169692610064705, 0.24169692610064705, 0.0, 0.0,
                  -0.26762446801768025, -0.0, 0.0, -0.0, 0.23411356595605096, 0.0,
                  0.5882648692660363, -0.5882648692660363, 1.0631615791358298,
                  0.23411356595605096, 0.24078314391374253, 0.23411356595605096, 0.0, 0.0,
                  -0.5882648692660363, 0.4748967098697935, -0.4748967098697935,
                  -0.18704558888036088, 0.40436494054246824, -0.18704558888036088, 0.0, 0.0,
                  -0.0, 0.21731935166210736, -0.21731935166210736, 0.40436494054246824, 0.0,
                  0.18704558888036088, -0.0, -0.0, 0.0], (14, 20))
    Dt = reshape([-0.55, -0.9, 0.2, 0.2, 0.5, -0.7, 0.1, 0.3, -0.5, -0.2, -0.7, 0.1, -0.2,
                  0.6], (14,))

    @test isapprox(loadingst[!, 2:end], loadings[!, 2:end])
    @test isapprox(C, Ct)
    @test isapprox(D, Dt)
end

@testset "Factor views" begin
    loadings = hcat(DataFrame(:tickers => ["GOOG", "AAPL", "FB", "BABA", "AMZN", "GE",
                                           "AMD", "WMT", "BAC", "GM", "T", "UAA", "SHLD",
                                           "XOM", "RRC", "BBY", "MA", "PFE", "JPM", "SBUX"]),
                    DataFrame(reshape([0.0006662517554895613, 0.0007849399521007353,
                                       0.0009459643095974261, 0.0008592165739551059,
                                       0.0017810088172303237, -0.0005785685052765102,
                                       0.0017612947636060521, 0.0003152090009733905,
                                       0.0008537176877854478, 0.0004723791639856617,
                                       0.00023196965409296734, -0.0005054162297035769,
                                       -0.0014286220563319559, -2.5004548117932975e-5,
                                       -0.0011796361837921718, 0.0011274045369944028,
                                       0.0010443935920757378, 0.00034316200087855785,
                                       0.0008756515571520004, 0.0006211971816987232,
                                       -0.06480893184671563, 0.1265663349283534,
                                       0.06531891020282664, -0.14583770722844627,
                                       0.17384069980818687, -0.10197670562589713,
                                       0.40552722097762517, 0.15455342961953242,
                                       0.13332079577168393, -0.12914789861819334,
                                       0.011581940571448384, 0.13255382044317096,
                                       -0.13950988276499568, 0.05523327575227021,
                                       0.6196572987779644, 0.315267811840457,
                                       0.19010334905522483, 0.21814502022320065,
                                       0.1112154776675108, 0.24492867002761698,
                                       0.03621442191787694, -0.018576988118456626,
                                       -0.033527310265712554, 0.1584057759842692,
                                       -0.017135982753150397, 0.08319092183606666,
                                       0.04095160488367243, -0.02410240121837933,
                                       -0.015985518611239317, 0.042107810262914956,
                                       0.01393611737205343, 0.12788949977560324,
                                       0.3458988137936367, 0.018928053608771953,
                                       -0.12582156590453064, -0.09421231675663434,
                                       -0.036305171782130156, -0.029356961596530413,
                                       -0.017287323397846128, -0.05338133590717126,
                                       -0.11792470271706594, -0.0926516044804406,
                                       -0.19273865391548434, -0.07072481964191567,
                                       -0.02369068378021912, 0.06541829500950368,
                                       0.10382212284974576, -0.03610528820893009,
                                       0.10038297096845941, 0.2944861267239947,
                                       -0.13781284666197124, 0.14227242984111085,
                                       0.6633454725811262, -0.04694291556860392,
                                       -0.22794077702668827, -0.15181516844962,
                                       -0.03792410511305884, -0.12294081844215514,
                                       -0.0018878868853723656, -0.1704758047222016,
                                       0.007948848158307176, -0.08393429696037784,
                                       0.07199537737330614, -0.3003098369766753,
                                       -0.06347006586041148, -0.1424226191965026,
                                       -0.2637077728661142, -0.06769462315395022,
                                       -0.09084369945363698, -0.027867525155884906,
                                       -0.015004515818551027, -0.32886678334558983,
                                       -0.6425048316279028, -0.14876099197615006,
                                       -0.27397526290127255, 0.05766292663184291,
                                       -0.12371744897166051, -0.027224863873640707,
                                       -0.06472451430464957, -0.012397422303371637,
                                       0.24297761348677277, -0.02001368763315179,
                                       0.11071406987599967, 0.45782457720286435,
                                       -0.10902518568940052, 0.1455663926686262,
                                       -0.2576158884320345, -0.10364528131083903,
                                       -0.22512091315073404, -0.16102302797620519,
                                       0.17173019738912326, 0.02121767790834828,
                                       0.041927044324022895, 0.04015829407065362,
                                       -0.395095048650537, -0.19591599492039793,
                                       -0.15760355158485626, -0.04545745159216734,
                                       -0.10326507296810988, -0.06053276587733248], 20, :),
                              [:const, :MTUM, :QUAL, :VLUE, :SIZE, :USMV]))

    views = DataFrame("Enabled" => [true, true, true, true, true, true, true, true, false],
                      "Factor" => ["MTUM", "USMV", "VLUE", "QUAL", "USMV", "MTUM", "QUAL",
                                   "VLUE", "USMV"],
                      "Sign" => ["<=", "<=", ">=", ">=", "<=", "<=", ">=", ">=", "<="],
                      "Value" => [0.9, -1.2, 0.3, -0.5, 0.7, -0.13, 0.17, -0.29, 0.72],
                      "Relative_Factor" => ["", "", "", "", "MTUM", "USMV", "VLUE", "QUAL",
                                            ""])

    P, Q = factor_views(views, loadings)

    Pt = reshape([-1.0, 0.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                  1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                  0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0], size(P))
    Qt = [-0.9, 1.2, 0.3, -0.5, -0.7, 0.13, 0.17, -0.29]

    @test isapprox(P, Pt)
    @test isapprox(Q, Qt)
end

@testset "HRP constraints" begin
    portfolio = Portfolio(; prices = prices_assets)
    asset_sets = DataFrame("Asset" => portfolio.assets,
                           "PDBHT" => [1, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2,
                                       3, 1],
                           "SPDBHT" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 3, 2, 3, 3, 3, 3, 1,
                                        4, 2, 1],
                           "Pward" => [1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 4, 2, 3, 4, 1, 2,
                                       2, 1],
                           "SPward" => [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 4, 3, 2, 2, 3, 1,
                                        2, 2, 1],
                           "G2DBHT" => [1, 2, 1, 1, 1, 3, 2, 3, 4, 3, 4, 3, 3, 4, 4, 3, 2,
                                        3, 4, 1],
                           "G2ward" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 2, 1,
                                        4, 2, 2])

    constraints = DataFrame("Enabled" => [true, true, true, true, true, true, false],
                            "Type" => ["Asset", "Asset", "All Assets", "All Assets",
                                       "Each Asset in Subset", "Each Asset in Subset",
                                       "Asset"],
                            "Set" => ["", "", "", "", "PDBHT", "Pward", ""],
                            "Position" => ["WMT", "T", "", "", 3, 2, "AAPL"],
                            "Sign" => [">=", "<=", ">=", "<=", ">=", "<=", ">="],
                            "Weight" => [0.05, 0.71, 0.02, 0.93, 0.07, 0.57, 0.2])

    w_min, w_max = hrp_constraints(constraints, asset_sets)

    w_mint = [0.02, 0.02, 0.02, 0.02, 0.02, 0.07, 0.02, 0.05, 0.07, 0.07, 0.07, 0.02, 0.02,
              0.07, 0.07, 0.02, 0.02, 0.02, 0.07, 0.02]
    w_maxt = [0.93, 0.93, 0.93, 0.93, 0.93, 0.57, 0.93, 0.57, 0.57, 0.57, 0.57, 0.93, 0.93,
              0.57, 0.93, 0.93, 0.93, 0.57, 0.57, 0.93]

    @test isapprox(w_min, w_mint)
    @test isapprox(w_max, w_maxt)
end

@testset "Turnover constraints" begin
    portfolio = Portfolio(; prices = prices_assets)
    asset_sets = DataFrame("Asset" => portfolio.assets,
                           "PDBHT" => [1, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2,
                                       3, 1],
                           "SPDBHT" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 3, 2, 3, 3, 3, 3, 1,
                                        4, 2, 1],
                           "Pward" => [1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 4, 2, 3, 4, 1, 2,
                                       2, 1],
                           "SPward" => [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 4, 3, 2, 2, 3, 1,
                                        2, 2, 1],
                           "G2DBHT" => [1, 2, 1, 1, 1, 3, 2, 3, 4, 3, 4, 3, 3, 4, 4, 3, 2,
                                        3, 4, 1],
                           "G2ward" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 2, 1,
                                        4, 2, 2])

    constraints = DataFrame("Enabled" => [true, true, true, true, false],
                            "Type" => ["All Assets", "Subset", "Asset", "Asset",
                                       "All Assets"], "Set" => ["", "PDBHT", "", "", ""],
                            "Position" => ["", 3, "WMT", "T", ""],
                            "Weight" => [0.05, 0.71, 0.02, 0.93, 0.69])

    to = turnover_constraints(constraints, asset_sets)
    tot = [0.05, 0.05, 0.05, 0.05, 0.05, 0.71, 0.05, 0.02, 0.71, 0.71, 0.93, 0.05, 0.05,
           0.71, 0.71, 0.05, 0.05, 0.05, 0.71, 0.05]
    @test isapprox(to, tot)
end

@testset "RB constraints" begin
    portfolio = Portfolio(; prices = prices_assets)
    asset_sets = DataFrame("Asset" => portfolio.assets,
                           "PDBHT" => [1, 2, 1, 1, 1, 3, 2, 2, 3, 3, 3, 4, 4, 3, 3, 4, 2, 2,
                                       3, 1],
                           "SPDBHT" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 3, 3, 2, 3, 3, 3, 3, 1,
                                        4, 2, 1],
                           "Pward" => [1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 4, 2, 3, 4, 1, 2,
                                       2, 1],
                           "SPward" => [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 4, 3, 2, 2, 3, 1,
                                        2, 2, 1],
                           "G2DBHT" => [1, 2, 1, 1, 1, 3, 2, 3, 4, 3, 4, 3, 3, 4, 4, 3, 2,
                                        3, 4, 1],
                           "G2ward" => [1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 4, 2, 3, 3, 3, 2, 1,
                                        4, 2, 2])
    constraints = DataFrame("Enabled" => [true], "Type" => ["All Assets"],
                            "Position" => [""], "Weight" => [""])
    w1 = rb_constraints(constraints, asset_sets)
    constraints = DataFrame("Enabled" => [true], "Type" => ["All Subsets"],
                            "Set" => ["G2ward"], "Weight" => [""])
    w2 = rb_constraints(constraints, asset_sets)
    constraints = DataFrame("Enabled" => [true], "Type" => ["All Subsets"],
                            "Set" => ["G2DBHT"], "Weight" => [""])
    w3 = rb_constraints(constraints, asset_sets)

    constraints = DataFrame("Enabled" => [true, true, true, true, false],
                            "Type" => ["Asset", "Asset", "Subset", "Subset", "All Assets"],
                            "Position" => ["GOOG", "FB", 2, 4, ""],
                            "Weight" => [0.15, "", 0.3, "", ""],
                            "Set" => ["", "", "G2ward", "G2ward", ""])
    w4 = rb_constraints(constraints, asset_sets)

    w1t = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
           0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]
    w2t = [0.04166666666666667, 0.04166666666666667, 0.04166666666666667,
           0.04166666666666667, 0.04166666666666667, 0.03571428571428572,
           0.06250000000000001, 0.08333333333333334, 0.03571428571428572,
           0.03571428571428572, 0.08333333333333334, 0.03571428571428572,
           0.06250000000000001, 0.06250000000000001, 0.06250000000000001,
           0.03571428571428572, 0.04166666666666667, 0.08333333333333334,
           0.03571428571428572, 0.03571428571428572]
    w3t = [0.05, 0.08333333333333333, 0.05, 0.05, 0.05, 0.03571428571428571,
           0.08333333333333333, 0.03571428571428571, 0.05, 0.03571428571428571, 0.05,
           0.03571428571428571, 0.03571428571428571, 0.05, 0.05, 0.03571428571428571,
           0.08333333333333333, 0.03571428571428571, 0.05, 0.05]
    w4t = [0.052631578947368425, 0.01754385964912281, 0.01754385964912281,
           0.01754385964912281, 0.01754385964912281, 0.10526315789473685,
           0.01754385964912281, 0.01754385964912281, 0.10526315789473685,
           0.10526315789473685, 0.01754385964912281, 0.10526315789473685,
           0.01754385964912281, 0.01754385964912281, 0.01754385964912281,
           0.10526315789473685, 0.01754385964912281, 0.01754385964912281,
           0.10526315789473685, 0.10526315789473685]
    @test isapprox(w1, w1t)
    @test isapprox(w2, w2t)
    @test isapprox(w3, w3t)
    @test isapprox(w4, w4t)
    @test isapprox(w4[1] / w4[2], 3)
    @test isapprox(w4[6] / w4[2], 6)
    @test isapprox(w4[6] / w4[1], 2)
end
