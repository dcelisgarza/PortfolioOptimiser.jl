using CSV, TimeSeries, DataFrames, StatsBase, Statistics, LinearAlgebra, Test, Clarabel,
      PortfolioOptimiser

path = joinpath(@__DIR__, "assets/stock_prices.csv")
prices = TimeArray(CSV.File(path); timestamp = :date)
rf = 1.0329^(1 / 252) - 1
l = 2.0

@testset "Frontier limits" begin
    portfolio = Portfolio(; prices = prices,
                          solvers = PortOptSolver(; name = :Clarabel,
                                                  check_sol = (; allow_local = true,
                                                               allow_almost = true),
                                                  solver = Clarabel.Optimizer,
                                                  params = ["verbose" => false,
                                                            "max_step_fraction" => 0.75]))

    asset_statistics!(portfolio)
    rm = [SD(), [CVaR()], [FLPM(), FLPM()]]

    type = Trad(; rm = rm, obj = Sharpe())
    limits = frontier_limits!(portfolio, type)
    type.obj = MinRisk()
    w_min = optimise!(portfolio, type)
    type.obj = MaxRet()
    w_max = optimise!(portfolio, type)

    @test isapprox(limits.w_min, w_min.weights)
    @test isapprox(limits.w_max, w_max.weights)

    rm = SD()

    type = Trad(; rm = rm)
    limits = frontier_limits!(portfolio, type)
    type.obj = MinRisk()
    w_min = optimise!(portfolio, type)
    type.obj = MaxRet()
    w_max = optimise!(portfolio, type)

    @test isapprox(limits.w_min, w_min.weights)
    @test isapprox(limits.w_max, w_max.weights)

    frontier1 = efficient_frontier!(portfolio, type; points = 5, rf = rf)
    wt = reshape([0.007909863718208692, 0.030689132983347227, 0.01050660990041214,
                  0.027486385541307695, 0.012277335148370877, 0.033410819106569664,
                  7.19001701075292e-8, 0.1398481239749223, 1.2060971961400614e-7,
                  2.560829728740191e-6, 0.28782180185707945, 7.671948087353831e-8,
                  5.976262190174281e-8, 0.12528222234695913, 3.3271078992744514e-7,
                  0.01508512798028727, 4.135374192029644e-6, 0.193122655563794,
                  1.5175778483964154e-7, 0.11655241221425348, 5.522276958560931e-8,
                  8.595183979598126e-8, 1.1299336635372262e-7, 9.004512566233612e-8,
                  0.7603444596017316, 2.08580516130825e-8, 0.10679791091262053,
                  5.318364539623743e-8, 1.1257263876073944e-7, 5.1236719252053716e-8,
                  4.8995979450766265e-8, 1.9451914599071348e-8, 1.4085158613674421e-8,
                  3.1081075961757114e-8, 1.398890557276243e-8, 0.13285613624117465,
                  4.412562291514369e-7, 5.7175230585541166e-8, 2.149806708039204e-7,
                  7.01651520830264e-8, 1.4860306153570928e-8, 1.586093647720839e-8,
                  2.0603609420579438e-8, 1.8510127568668975e-8, 0.4792544892263266,
                  7.332146757732192e-9, 0.5207452616533395, 1.0862065146331767e-8,
                  1.689839747199645e-8, 1.1874455644487437e-8, 1.058141136728114e-8,
                  7.637039179938028e-9, 5.732880075629204e-9, 9.035321824918956e-9,
                  5.9453479790237516e-9, 2.8890094091247835e-8, 2.1573814625698112e-8,
                  1.1408109909553528e-8, 1.7532052223695655e-8, 1.3982218037212305e-8,
                  3.68765606959253e-8, 3.925078039889433e-8, 5.0267856560952206e-8,
                  4.534936521454975e-8, 0.2253167939231681, 1.79053236983848e-8,
                  0.7746825959433669, 2.7016545142280965e-8, 4.158910659632807e-8,
                  2.950445596061817e-8, 2.6284081514031667e-8, 1.8734140111438105e-8,
                  1.387455189961742e-8, 2.2300379059227587e-8, 1.438228892810144e-8,
                  6.801120248198739e-8, 5.2481848074990657e-8, 2.8375420387311174e-8,
                  4.315699851212266e-8, 3.477255994498986e-8, 2.242587206595174e-8,
                  2.3869345716625685e-8, 3.024997207350619e-8, 2.744103641112632e-8,
                  2.6740164731041483e-6, 1.1117945428241134e-8, 0.9999969549278994,
                  1.6603745202126465e-8, 2.5223224540488007e-8, 1.80884003672185e-8,
                  1.617238072116024e-8, 1.1616638625384154e-8, 8.681387037143574e-9,
                  1.377196283641718e-8, 8.992921448806854e-9, 4.039243447801537e-8,
                  3.160044888931908e-8, 1.7426103713603228e-8, 2.616643689902117e-8,
                  2.1215370936889356e-8, 1.0281066073498714e-8, 3.017344324128707e-8,
                  4.1151959841008194e-8, 2.420627180493771e-8, 0.5180577664036016,
                  3.0895752299482173e-9, 0.06365090158409331, 2.427607898219503e-8,
                  2.382755755251406e-8, 1.1677826757943628e-8, 1.9040153364316153e-8,
                  2.6843397253765303e-9, 1.992679601883456e-9, 5.636312247418675e-9,
                  1.941501877083489e-9, 0.14326786015272555, 0.19649710464774472,
                  2.2781358140603802e-8, 0.078526120222692, 2.4229018347212206e-8], 20, :)
    @test isapprox(Matrix(frontier1[:weights][!, 2:end]), wt)

    wt = reshape([0.007909394729268278, 0.030690031456872584, 0.010506888898099044,
                  0.027486968345041597, 0.012277609956471378, 0.03341161180109064,
                  1.323781083918104e-9, 0.1398483916179671, 2.291047864946532e-9,
                  3.6572867111228674e-8, 0.2878223523344577, 1.52989153786824e-9,
                  1.181044715105426e-9, 0.12528365238381148, 6.016585823556773e-9,
                  0.015085469019209397, 5.660199301875489e-8, 0.193123858123687,
                  2.888310326964356e-9, 0.11655366292850229, 1.041669325602768e-8,
                  4.3317182854182e-7, 1.3288920530350866e-6, 8.571332771167551e-8,
                  0.30559593417129466, 2.9622941203741676e-9, 0.03015251360641987,
                  0.07142919097829747, 1.2634670215036934e-8, 1.2275039349286197e-8,
                  0.11870114361526896, 1.7290181839131632e-9, 1.2681017673441843e-9,
                  6.3833434720219826e-9, 1.3234594172288643e-9, 0.0982483564669195,
                  0.1941246365274598, 0.07252631057085214, 0.09661493813735562,
                  0.012605079156302912, 1.0012648986398347e-8, 3.511877716514275e-8,
                  4.550374219509118e-8, 2.369054042953939e-8, 0.461251911983998,
                  3.0750722821350632e-9, 0.05336125539024205, 6.187949507509943e-8,
                  1.6451626324598276e-8, 1.0714004735223522e-8, 3.473645060619358e-8,
                  2.1903109772776372e-9, 1.6088530192079228e-9, 5.524926810026879e-9,
                  1.569885204680518e-9, 0.13742597541525378, 0.22994625856661463,
                  3.782135530122393e-8, 0.11801427905299251, 2.9693209871116176e-8,
                  3.811661544703151e-9, 6.963811789113534e-9, 9.034866053644113e-9,
                  6.687521293747189e-9, 0.6874089047044809, 1.3125038554468875e-9,
                  0.0927727472358781, 4.249616646097679e-9, 9.508244512668183e-9,
                  3.5702247384925925e-9, 3.757886437105591e-9, 1.089316855193812e-9,
                  7.776116820008926e-10, 2.0356726702481484e-9, 7.616541732812044e-10,
                  0.1550278651633079, 0.06479037166454016, 4.616501873750707e-9,
                  4.7685627169169914e-8, 5.3690717226579565e-9, 2.6448730799543275e-9,
                  2.84136407921336e-9, 3.522895866005757e-9, 3.173029043321613e-9,
                  0.8533950733241444, 1.2212191075632512e-9, 0.1466048825059837,
                  1.9079993932701713e-9, 3.028621888738376e-9, 2.006910120031864e-9,
                  1.7998471634803133e-9, 1.1638763753787592e-9, 8.445384798942713e-10,
                  1.4971269872145801e-9, 8.53684515570025e-10, 6.0777608650998104e-9,
                  3.916392054196438e-9, 2.0275785532387972e-9, 3.23260743019179e-9,
                  2.4095469351237304e-9, 1.026855832377015e-8, 3.2139097529224765e-8,
                  4.1856314419920304e-8, 2.3600679221681593e-8, 0.4894179639360829,
                  3.230971832847484e-9, 0.05833720025769615, 3.3199118937348626e-8,
                  2.116837720240594e-8, 1.1529085913907569e-8, 2.424939577704955e-8,
                  2.628707801353928e-9, 1.9131084660782398e-9, 5.84251969297182e-9,
                  1.8637737926838568e-9, 0.1403269734754189, 0.213377177297938,
                  2.8301813554462742e-8, 0.09854041682213821, 2.6419203527148663e-8], 20, :)
    frontier2 = efficient_frontier!(portfolio, Trad(; kelly = EKelly(), rm = SD());
                                    points = 5, rf = rf)
    @test isapprox(Matrix(frontier2[:weights][!, 2:end]), wt, rtol = 5.0e-6)
end
